#!/bin/bash
#
# @@script: backup.sh
# @@description: incremental backup init script
# @@author: Loouis Low
# @@copyright: Loouis Low (https://loouislow81.github.io)
# @@license: MIT
#

###### vars ######

# ansi
blue='\e[94m'
cyan='\e[36m'
green='\e[92m'
red='\e[91m'
dgray='\e[90m'
lgray='\e[37m'
bggray='\e[100m'
bgcyan='\e[46m'
nc='\033[0m'
bold=$(tput bold)
normal=$(tput sgr0)
tag='\e[100m'
title="${blue}(equilibrium)${nc}"
arrow="${red}>>${nc}"

# configurations
export USER="yourname"
export HOME="/path/to/backup/destination"
BACKUP_DIR="${HOME}/.backup"
DEST_DIR="usr-${USER}"
MEDIUM="${HOME}"
BACKUP_SOURCE="/path/to/backup/target"
BACKUP_DESTINATION="${MEDIUM}/.backup/usr-${USER}"
BACKUP_SIZE="/dev/sdb1"
FLTR_FOLDER_1="Downloads"
FLTR_FOLDER_2="Music"
FLTR_FOLDER_3="Videos"
FLTR_FOLDER_4="Pictures"
FLTR_FOLDER_5="log"
FLTR_FOLDER_6="Public"
FLTR_FOLDER_7=".cache"
LOG="/home/${USER}/.log/backup.log"

###### funcs ######

root_only() {
  if [ "$(whoami &2> /dev/null)" != "root" ] &&
     [ "$(id -un &2> /dev/null)" != "root" ]; then
    echo -e "$title permission denied."
    exit 1
  fi
}

create_marker() {
  echo -e "$title create backup marker..."
  mkdir -p "$BACKUP_DESTINATION"
  touch "$BACKUP_DESTINATION/backup.marker"
}

run_backup() {
  echo -e "$title started..."
  equilibrium ${BACKUP_SOURCE} ${BACKUP_DESTINATION}
  echo -e "$title backup $arrow done!"
}

optimize_backup() {
  echo -e "$TITLE optimizing backup..."

  find $BACKUP_DIR/$DEST_DIR \
    -name ${FLTR_FOLDER_1} \
    -exec rm -r {} \;
  echo -e "$title Downloads $arrow folder removed!"

  find $BACKUP_DIR/$DEST_DIR \
    -name ${FLTR_FOLDER_2} \
    -type d -exec rm -r {} \;
  echo -e "$title Musics $arrow folder removed!"

  find $BACKUP_DIR/$DEST_DIR \
    -name ${FLTR_FOLDER_3} \
    -type d -exec rm -r {} \;
  echo -e "$title Videos $arrow folder removed!"

  find $BACKUP_DIR/$DEST_DIR \
    -name ${FLTR_FOLDER_4} \
    -type d -exec rm -r {} \;
  echo -e "$title Pictures $arrow folder removed!"

  find $BACKUP_DIR/$DEST_DIR \
    -name $FLTR_FOLDER_5 \
    -type d -exec rm -r {} \;
  echo -e "$title log $arrow folder removed!"

  find $BACKUP_DIR/$DEST_DIR \
    -name ${FLTR_FOLDER_6} \
    -type d -exec rm -r {} \;
  echo -e "$title Public $arrow folder removed!"

  find $BACKUP_DIR/$DEST_DIR \
    -name ${FLTR_FOLDER_7} \
    -exec rm -r {} \;
  echo -e "$title Cache $arrow folder removed!"
}

show_backup_size() {
  echo -e "$title getting backup size..."
  df -h ${BACKUP_SIZE}
}

write_log() {
  echo -e "$title sync finished at `date` $arrow ${LOG}"
}

###### init ######

root_only
create_marker
run_backup
optimize_backup
write_log
show_backup_size

